### Get all triplets first and save them in tempDls

# need to import your data
df = #data 
df$class = #label 

##################################
## no need to modify code below ##
##################################
level_n = length(names(table(df$class))) 

library(utils)

alltriplet = combn(names(table(df$class)),3) 
n = choose(level_n,3) 

tempDls <- list()
for(i in 1:n){
  tempDls[[i]]  <- 
    df[c(which(df$class==alltriplet[1,i]),  
         which(df$class==alltriplet[2,i]), 
         which(df$class==alltriplet[3,i])),]
}

### Algorithm
###################################################
# input: data and labels                          #
# note: hctree(method)                            #
# output: Triplet, P1, P2, P3, cultering results  #
# #################################################
tripletP <- function(dataX, label){
  temp = names(which(table(label)>0))
 label <- factor(label, levels = c(temp))
  
  ns1 = table(label)[1]
  ns2 = table(label)[2]
  ns3 = table(label)[3]
  distD = dist(dataX) #
  h = hclust(distD,method="ward.D2")
  grp = cutree(h,2)
  
  p1 = table(label,grp)[1,1]/ns1
  p2 = table(label,grp)[2,1]/ns2
  p3 = table(label,grp)[3,1]/ns3
  return(list(Triplet=temp, P=c(p1=p1,p2=p2,p3=p3), Cluster=table(label,grp)))
}
tripletP = cmpfun(tripletP)

### This part of code keeps something u need later
Pmatrix <- matrix(0,n,3)
sublabmatrix <- matrix(0,n,3)

for(i in 1:n){
  Ans = tripletP(tempDls[[i]], tempDls[[i]]$class) # *need* class is ur label
  Pmatrix[i,] <- Ans$P
  sublabmatrix[i,] <- Ans$Triplet
}

###########################################################
# input: Ps and labels                                    #
# note:                                                   #
# output: H (dominance matrix), D (dissimilarity matrix)  #
# #########################################################

HD <- function(p1,p2,p3,sublabmatrix,iindex){
  
  H_ij = p1*p3+(1-p1)*(1-p3)
  H_ji = p1*p2+(1-p1)*(1-p2)
  H_ik = p2*p3+(1-p2)*(1-p3)
  
  H = matrix(0,3,3)
  H[1,2] = H_ij
  H[3,2] = H_ij
  H[2,1] = H_ji
  H[3,1] = H_ji
  H[1,3] = H_ik
  H[2,3] = H_ik
  
  
  D = matrix(0,3,3)
  D[1,2] = rowSums(H)[1]
  D[2,1] = rowSums(H)[1]
  D[1,3] = rowSums(H)[2]
  D[3,1] = rowSums(H)[2]
  D[2,3] = rowSums(H)[3]
  D[3,2] = rowSums(H)[3]
  
  colnames(D) <- c(sublabmatrix[iindex,])
  rownames(D) <- c(sublabmatrix[iindex,])
  return(list(H=H, D=D))}
HD = cmpfun(HD)

Hmatrix <- list()
for(iindexx  in 1:n){
  Hmatrix[[iindexx]] = 
    HD(Pmatrix[iindexx,1],Pmatrix[iindexx,2],Pmatrix[iindexx,3],sublabmatrix,iindexx)$H
  
}

pairedD <- list()
for(iindexx  in 1:n){
  pairedD[[iindexx]] <- rowSums(Hmatrix[[iindexx]])
}

pairedDdata = do.call("rbind",pairedD)  
sublabmatrix <- as.data.frame(sublabmatrix)
Paired1 <- with(sublabmatrix, paste0(V1, V2))
Paired2 <- with(sublabmatrix, paste0(V1, V3))
Paired3 <- with(sublabmatrix, paste0(V2, V3))


GetD1 <- function(i){
  pairname = unique(Paired1)[i]
  indx = which(Paired1==pairname)
  DD = as.numeric(sum(pairedDdata[indx,1]))
  temp = c(Pair=pairname, D=DD)
  return(temp) 
}
GetD1 = cmpfun(GetD1)

paired1n = length(unique(Paired1))
saveD = lapply(1:paired1n, GetD1)

library(plyr)
#detach(package:plyr)

my_df <- ldply(saveD)
ttemp = unique(sublabmatrix[,c('V1','V2')])
my_df$v1 = ttemp$V1
my_df$v2 = ttemp$V2


GetD2 <- function(i){
  pairname = unique(Paired2)[i]
  indx = which(Paired2==pairname)
  DD = as.numeric(sum(pairedDdata[indx,2]))
  temp = c(Pair=pairname, D=DD)
  return(temp) 
}
GetD2 = cmpfun(GetD2)

paired2n = length(unique(Paired2))
saveD2 = lapply(1:paired2n,GetD2)
my_df2 <- ldply(saveD2)
ttemp = unique(sublabmatrix[,c('V1','V3')])
my_df2$v1 = ttemp$V1
my_df2$v2 = ttemp$V3

GetD3 <- function(i){
  pairname = unique(Paired3)[i]
  indx = which(Paired3==pairname)
  DD = as.numeric(sum(pairedDdata[indx,3]))
  temp = c(Pair=pairname,D=DD)
  return(temp) 
}
GetD3 = cmpfun(GetD3)

paired3n = length(unique(Paired3))
saveD3 = lapply(1:paired3n,GetD3)
my_df3 <- ldply(saveD3)
ttemp = unique(sublabmatrix[,c('V2','V3')])
my_df3$v1 = ttemp$V2
my_df3$v2 = ttemp$V3

finalDmatrix = rbind(my_df, my_df2, my_df3)

vname = unique(finalDmatrix$v1)

DDDls = list()
#library(tidyverse)
for(i in 1: length(vname)){
dd = finalDmatrix[which(finalDmatrix$v1 == vname[i]),]
ddd = dd[order(dd[,4]),]
ddd$D = as.numeric(ddd$D)
ddd[,c(2,4)] %>% 
  group_by(v2) %>% 
  summarise_all(funs(sum)) -> dist10A
DDDls[[i]] <- c(as.character(vname[i]), dist10A)
}

DDist = matrix(0, level_n, level_n) #level

nn = level_n-1
for(i in 1:nn){ 
  DDist[i,] = c(rep(0,i), DDDls[[i]]$D)
}

DDDist = DDist + t(DDist) 

rownames(DDDist) = names( table(df$class) ) #check the order with vname
colnames(DDDist) = names( table(df$class) ) 

######################################################################
# use DDDist as the distance to get label embedding tree by hclust() #
######################################################################
h = hclust( as.dist(DDDist), method = "ward.D2")
plot( h, hang = -1, xlab = "", main = "label embedding tree")
